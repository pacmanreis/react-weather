{"version":3,"sources":["Components/Navbar/Navbar.js","Components/Today/Today.js","Components/Week/Week.js","Components/Welcome/Welcome.js","Components/Footer/Footer.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Navbar","props","type","className","name","placeholder","minLength","debounceTimeout","onChange","handleChange","convertweekDay","unixTimestamp","Date","getDay","Today","citySplit","data","geocode","display_name","split","city","country","length","currentData","weatherInfo","currently","dailyData","daily","hourlyData","hourly","timeToday","map","index","time","key","getHours","src","icon","alt","width","Math","round","temperature","summary","precipProbability","onClick","clicked","temperatureHigh","temperatureLow","todaySummary","Week","weekTest","slice","shift","dayData","day","weekSummary","Welcome","Footer","href","target","rel","App","state","loading","handleSearch","setState","fetch","process","then","response","json","error","lat","lon","event","value","handleClickToday","prevState","handleClickWeek","displayToday","displayWeek","welcome","undefined","this","CSSTransition","in","appear","timeout","classNames","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+UAmBeA,MAdf,SAAgBC,GACd,OACI,kBAAC,gBAAD,CACEC,KAAK,OACLC,UAAU,SACVC,KAAMH,EAAMG,KACZC,YAAY,oBACZC,UAAW,EACXC,gBAAiB,IACjBC,SAAUP,EAAMQ,gBCZlBC,EAAiB,SAACC,GAGvB,OAFa,IAAIC,KAAmB,IAAdD,GACDE,UAgEPC,EAtDD,SAACb,GACb,IACMc,EADWd,EAAMe,KAAKC,QAAQC,aACTC,MAAM,MAC3BC,EAAOL,EAAU,GACjBM,EAAUN,EAAUA,EAAUO,OAAO,GAErCC,EAActB,EAAMe,KAAKQ,YAAYC,UACrCC,EAAYzB,EAAMe,KAAKQ,YAAYG,MAAMX,KACzCY,EAAa3B,EAAMe,KAAKQ,YAAYK,OAAOb,KAC3Cc,EAAYF,EAAWG,IAAI,SAACf,EAAMgB,GAAP,OAC/BtB,EAAekB,EAAW,GAAGK,QAAUvB,EAAeM,EAAKiB,MACzD,yBAAK9B,UAAU,eAAe+B,IAAKF,GACjC,8BAlBcrB,EAmBEK,EAAKiB,KAlBf,IAAIrB,KAAmB,IAAdD,GACHwB,WAiBe,QAE3B,yBAAKhC,UAAU,gBACb,yBAAKiC,IAAG,2BAAsBpB,EAAKqB,KAA3B,QAAuCC,IAAKtB,EAAKqB,KAAME,MAAM,QAEvE,6BACGC,KAAKC,MAAMzB,EAAK0B,aAAa,SAGjC,KA5Bc,IAAC/B,IA+BdgC,EAAU,yBAAKxC,UAAU,qBACb,yBAAKA,UAAU,iBACb,6BAAK,yBAAKiC,IAAG,2BAAsBb,EAAYc,KAAlC,QAA8CC,IAAKf,EAAYc,KAAME,MAAM,QACxF,6BACE,2BAAIhB,EAAYoB,SAChB,8CAAoBH,KAAKC,MAAsC,IAAhClB,EAAYqB,mBAA3C,MAEF,yBAAKzC,UAAU,eAAeqC,KAAKC,MAAMlB,EAAYmB,aAArD,SAEF,6BACE,wBAAIvC,UAAU,UACd,uBAAGA,UAAU,WAAWF,EAAMe,KAAKQ,YAAYK,OAAOc,SACtD,uBAAGxC,UAAU,WAAb,cAIpB,OACE,yBAAKA,UAAU,YAAY0C,QAAS5C,EAAM6C,SACxC,yBAAK3C,UAAU,UACb,6BAAMiB,EAAN,KAAcC,EAAd,YACA,6BAAMmB,KAAKC,MAAMf,EAAU,GAAGqB,iBAA9B,QAAkDP,KAAKC,MAAMf,EAAU,GAAGsB,gBAA1E,SAEF,yBAAK7C,UAAU,QACdF,EAAMe,KAAKiC,aAAeN,EAAUb,KCzB5BoB,EA5BF,SAAAjD,GACX,IACIkD,EADalD,EAAMe,KAAKQ,YAAYG,MAAMX,KACtBoC,MAAM,GAC9BD,EAASE,QACT,IAAMC,EAAUH,EAASpB,IAAI,SAACwB,EAAKvB,GACjC,OAAO,yBAAK7B,UAAU,eAAe+B,IAAKF,EAAQ,KAChD,8BAbWrB,EAcA4C,EAAItB,KAbH,CAAC,SAAS,SAAS,UAAW,YAAa,WAAY,SAAS,YACpE,IAAIrB,KAAmB,IAAdD,GACQE,YAazB,yBAAKV,UAAU,gBACb,yBAAKiC,IAAG,2BAAsBmB,EAAIlB,KAA1B,QAAsCC,IAAKiB,EAAIlB,KAAME,MAAM,QAErE,6BACGC,KAAKC,MAAMc,EAAIR,iBADlB,QACsCP,KAAKC,MAAMc,EAAIP,gBADrD,SAnBU,IAACrC,IAyBf,OACE,yBAAKR,UAAU,YAAY0C,QAAS5C,EAAM6C,SAC1C,yBAAK3C,UAAU,UACb,6CAEF,yBAAKA,UAAU,QAAQF,EAAMe,KAAKwC,YAAc,6BAAK,uBAAGrD,UAAU,WAAWF,EAAMe,KAAKQ,YAAYG,MAAMgB,SAAY,uBAAGxC,UAAU,WAAb,aAA4CmD,KC1BvJG,EAJC,WACd,OAAO,wBAAItD,UAAU,iBAAd,cAAyC,6BAAM,6BAA/C,mBC2BMuD,EA5BA,WACb,OAAO,gCACL,2BACE,4DACA,uBAAGC,KAAK,oDACNC,OAAO,SACPC,IAAI,uBACJ,yBAAKzB,IAAI,8BACPE,IAAI,WACJC,MAAM,QAPZ,IAQO,uBAAGoB,KAAK,gCACXC,OAAO,SACPC,IAAI,uBACJ,yBAAKzB,IAAI,4BACPE,IAAI,WACJC,MAAM,SAGZ,2BACE,uBAAGoB,KAAK,kCAAR,uBADF,gBAGmB,uBAAGA,KAAK,yCAAR,qBCiFRG,G,iNA9FbC,MAAQ,CACNC,SAAS,EACT5C,KAAM,SACNH,QAAS,GACTO,YAAa,GACbyB,cAAc,EACdO,aAAa,G,EAGfS,aAAe,WACb,EAAKC,SAAS,CAAEF,SAAS,IACzBG,MAAM,gDAAD,OAAiDC,iBAAjD,cAA4F,EAAKL,MAAM3C,KAAvG,oCACJiD,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAArD,GACe,sBAAfA,EAAKwD,QACP,EAAKN,SAAS,CAAEjD,QAASD,EAAK,KAC9BmD,MAAM,wEAAD,OAAyEC,mCAAzE,YAA+G,EAAKL,MAAM9C,QAAQwD,IAAlI,YAAyI,EAAKV,MAAM9C,QAAQyD,IAA5J,cACFL,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAArD,GAAI,OAAI,EAAKkD,SAAS,CAC1B1C,YAAaR,EACbgD,SAAS,U,EAMnBvD,aAAe,SAACkE,GAAW,IAAD,EACAA,EAAMf,OAAtBxD,EADgB,EAChBA,KAAMwE,EADU,EACVA,MACd,EAAKV,SAAL,eACG9D,EAAOwE,IAEV,EAAKX,gB,EAGPY,iBAAmB,WACjB,EAAKX,SAAS,SAACY,GACb,MAAO,CAAC7B,cAAe6B,EAAU7B,iB,EAIrC8B,gBAAkB,WAChB,EAAKb,SAAS,SAACY,GACb,MAAO,CAACtB,aAAcsB,EAAUtB,gB,wEAKlC,IAAIwB,GAAe,EACfC,GAAc,EACdC,EAAU,yBAAK/E,UAAU,WAAU,kBAAC,EAAD,OAyBvC,YAxB+BgF,IAA3BC,KAAKrB,MAAMvC,cAAoD,IAAvB4D,KAAKrB,MAAMC,UACrDkB,GAAU,EAEVD,EAAc,kBAACI,EAAA,EAAD,CACZC,IAAI,EACJC,QAAM,EACNC,QAAS,IACTC,WAAW,OACXvD,IAAI,iBAEJ,kBAAC,EAAD,CAAMlB,KAAMoE,KAAKrB,MAAQjB,QAASsC,KAAKL,mBAGzCC,EAAe,kBAACK,EAAA,EAAD,CACbC,IAAI,EACJC,QAAM,EACNC,QAAS,IACTC,WAAW,OACXvD,IAAI,qBAEJ,kBAAC,EAAD,CAAOlB,KAAMoE,KAAKrB,MAAOjB,QAASsC,KAAKP,qBAKzC,yBAAK1E,UAAU,OACb,8BACE,yBAAKA,UAAU,UACb,kBAAC,EAAD,CAAQC,KAAK,OAAOK,aAAc2E,KAAK3E,aAAcO,KAAMoE,KAAKrB,SAEjEmB,EACD,yBAAK/E,UAAU,cACZ6E,GAEH,yBAAK7E,UAAU,aACZ8E,IAGL,kBAAC,EAAD,W,GAzFUS,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC,iB","file":"static/js/main.3b31047b.chunk.js","sourcesContent":["import React from 'react'\nimport { DebounceInput } from 'react-debounce-input';\n\nimport './Navbar.css'\n\nfunction Navbar(props) {\n  return(\n      <DebounceInput\n        type='text'\n        className='search'\n        name={props.name}\n        placeholder='Search for a City'\n        minLength={2}\n        debounceTimeout={300}\n        onChange={props.handleChange}\n      />\n  )\n}\n\nexport default Navbar\n","import React from 'react';\n\nconst convertweekDay = (unixTimestamp) => {\n const date = new Date(unixTimestamp*1000)\n const weekDay = date.getDay()\n return weekDay\n}\n\nconst convertHours = (unixTimestamp) => {\n const date = new Date(unixTimestamp*1000)\n const hours = date.getHours()\n return hours\n}\n\nconst Today = (props) => {\n  const cityData = props.data.geocode.display_name;\n  const citySplit = cityData.split(', ');\n  const city = citySplit[0];\n  const country = citySplit[citySplit.length-1];\n\n  const currentData = props.data.weatherInfo.currently;\n  const dailyData = props.data.weatherInfo.daily.data;\n  const hourlyData = props.data.weatherInfo.hourly.data;\n  const timeToday = hourlyData.map((data, index) =>\n    convertweekDay(hourlyData[0].time) === convertweekDay(data.time) ?\n      <div className=\"weather-item\" key={index}>\n        <div>\n          {convertHours(data.time)+\":00\"}\n        </div>\n        <div className=\"weather-icon\">\n          <img src={`./assets/weather/${data.icon}.svg`} alt={data.icon} width=\"30\"/>\n        </div>\n        <div>\n          {Math.round(data.temperature)+\"º\"}\n        </div>\n      </div>\n     : null\n  )\n\n  const summary = <div className=\"summary-container\">\n                    <div className=\"upper-summary\">\n                      <div><img src={`./assets/weather/${currentData.icon}.svg`} alt={currentData.icon} width=\"60\"/></div>\n                      <div>\n                        <p>{currentData.summary}</p>\n                        <p>Chance of Rain: {Math.round(currentData.precipProbability * 100)}%</p>\n                      </div>\n                      <div className=\"temperature\">{Math.round(currentData.temperature)}º</div>\n                    </div>\n                    <div>\n                      <hr className=\"split\" />\n                      <p className=\"summary\">{props.data.weatherInfo.hourly.summary}</p>\n                      <p className=\"details\">See more</p>\n                    </div>\n                  </div>\n\n  return(\n    <div className=\"container\" onClick={props.clicked}>\n      <div className=\"header\">\n        <div>{city}, {country} (Today)</div>\n        <div>{Math.round(dailyData[0].temperatureHigh)}º/{Math.round(dailyData[0].temperatureLow)}º</div>\n      </div>\n      <div className=\"body\">\n      {props.data.todaySummary ? summary : timeToday}\n      </div>\n    </div>\n  )\n};\n\nexport default Today;\n","import React from 'react'\n\nconst convert = (unixTimestamp) => {\n const weekDays = ['Sunday','Monday','Tuesday', 'Wednesday', 'Thursday', 'Friday','Saturday']\n const date = new Date(unixTimestamp*1000)\n const weekDay = weekDays[date.getDay()]\n return weekDay\n}\n\nconst Week = props => {\n  const weekData = props.data.weatherInfo.daily.data\n  let weekTest = weekData.slice(0)\n  weekTest.shift()\n  const dayData = weekTest.map((day, index) => {\n    return <div className=\"weather-item\" key={index + 100}>\n      <div>\n        {convert(day.time)}\n      </div>\n      <div className=\"weather-icon\">\n        <img src={`./assets/weather/${day.icon}.svg`} alt={day.icon} width=\"30\"/>\n      </div>\n      <div>\n        {Math.round(day.temperatureHigh)}º/{Math.round(day.temperatureLow)}º\n      </div>\n    </div>}\n  )\n\n  return(\n    <div className=\"container\" onClick={props.clicked}>\n    <div className=\"header\">\n      <div>Next 7 Days</div>\n    </div>\n    <div className=\"body\">{props.data.weekSummary ? <div><p className=\"summary\">{props.data.weatherInfo.daily.summary}</p><p className=\"details\">See more</p></div> : dayData}</div>\n  </div>\n  )\n}\n\nexport default Week\n","import React from 'react'\n\nconst Welcome = () => {\n  return <h1 className=\"text-focus-in\"> Welcome to<br /><br />Weather Search</h1>\n}\n\nexport default Welcome\n","import React from 'react'\n\nconst Footer = () => {\n  return <footer>\n    <p>\n      <strong>Developed by Paulo Reis </strong>\n      <a href=\"https://www.linkedin.com/in/paulo-reis-955411186/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\">\n        <img src=\"./assets/icons/linkedin.svg\"\n          alt=\"linkedin\"\n          width=\"15\"/>\n      </a> <a href=\"https://github.com/pacmanreis\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\">\n        <img src=\"./assets/icons/github.svg\"\n          alt=\"linkedin\"\n          width=\"15\"/>\n      </a>\n    </p>\n    <p>\n      <a href=\"https://darksky.net/poweredby/\">\n        Powered by Dark Sky\n      </a> & Search by <a href=\"https://locationiq.com/?ref=link-back\">\n        LocationIQ.com\n      </a>\n    </p>\n  </footer>\n}\n\nexport default Footer\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport Navbar from '../Components/Navbar/Navbar'\nimport Today from '../Components/Today/Today'\nimport Week from '../Components/Week/Week'\nimport Welcome from '../Components/Welcome/Welcome'\nimport Footer from '../Components/Footer/Footer'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    loading: true,\n    city: \"Lisbon\",\n    geocode: \"\",\n    weatherInfo: [],\n    todaySummary: true,\n    weekSummary: true\n  }\n\n  handleSearch = () => {\n    this.setState({ loading: true })\n    fetch(`https://eu1.locationiq.com/v1/search.php?key=${process.env.REACT_APP_LOCATION_IQ_KEY}&q=${this.state.city}&format=json&accept-language=en`)\n    .then(response => response.json())\n    .then(data => {\n      if (data.error !== \"Unable to geocode\")\n      { this.setState({ geocode: data[0] })\n        fetch(`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/${process.env.REACT_APP_DARK_SKY_KEY}/${this.state.geocode.lat},${this.state.geocode.lon}?units=si`)\n          .then(response => response.json())\n          .then(data => this.setState({\n            weatherInfo: data,\n            loading: false\n          }))\n      }\n    });\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n    this.handleSearch();\n  }\n\n  handleClickToday = () => {\n    this.setState((prevState) => {\n      return {todaySummary: !prevState.todaySummary}\n    })\n  }\n\n  handleClickWeek = () => {\n    this.setState((prevState) => {\n      return {weekSummary: !prevState.weekSummary}\n    })\n  }\n\n  render() {\n    let displayToday = false;\n    let displayWeek = false;\n    let welcome = <div className=\"welcome\"><Welcome /></div>;\n    if (this.state.weatherInfo !== undefined && this.state.loading === false) {\n      welcome = false;\n\n      displayWeek = <CSSTransition\n        in={true}\n        appear\n        timeout={1000}\n        classNames=\"fade\"\n        key=\"bljkablkjabda\"\n      >\n        <Week data={this.state}  clicked={this.handleClickWeek} />\n      </CSSTransition>;\n\n      displayToday = <CSSTransition\n        in={true}\n        appear\n        timeout={1000}\n        classNames=\"fade\"\n        key=\"b3232ljkablkjabda\"\n      >\n        <Today data={this.state} clicked={this.handleClickToday} />\n      </CSSTransition>;\n    };\n\n    return (\n      <div className=\"app\">\n        <main>\n          <div className=\"navbar\">\n            <Navbar name=\"city\" handleChange={this.handleChange} data={this.state} />\n          </div>\n          {welcome}\n          <div className=\"today-card\">\n            {displayToday}\n          </div>\n          <div className=\"week-card\">\n            {displayWeek}\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}