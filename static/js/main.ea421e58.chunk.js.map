{"version":3,"sources":["Components/Welcome/Welcome.module.css","Components/Navbar/Navbar.js","Components/Today/Today.js","Components/Week/Week.js","Components/Welcome/Welcome.js","Components/Footer/Footer.js","Containers/App.js","serviceWorker.js","index.js","Components/Navbar/Navbar.module.css","Components/Today/Today.module.css"],"names":["module","exports","React","memo","props","className","classes","navbar","type","search","name","placeholder","minLength","debounceTimeout","onChange","handleChange","convertweekDay","unixTimestamp","Date","getDay","city","undefined","data","geocode","address","state","country","currentData","weatherInfo","currently","dailyData","daily","hourlyData","hourly","timeToday","map","index","time","key","getHours","src","icon","alt","width","Math","round","temperature","summary","upperSummary","precipProbability","onClick","clicked","temperatureHigh","temperatureLow","todaySummary","weekTest","slice","shift","dayData","day","weekSummary","display","loading","noresult","textfocusin","loader","welcome","href","target","rel","App","handleSearch","setState","fetch","process","then","response","ok","json","error","lat","lon","event","value","handleClickToday","prevState","handleClickWeek","that","this","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","displayToday","displayWeek","CSSTransition","in","appear","timeout","classNames","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,KAAO,sBAAsB,YAAc,6BAA6B,gBAAgB,iC,mQCoB/JC,UAAMC,KAhBrB,SAAgBC,GACd,OACE,yBAAKC,UAAWC,IAAQC,QACtB,kBAAC,gBAAD,CACEC,KAAK,OACLH,UAAWC,IAAQG,OACnBC,KAAK,OACLC,YAAY,oBACZC,UAAW,EACXC,gBAAiB,IACjBC,SAAUV,EAAMW,kB,gBCZlBC,EAAiB,SAACC,GAGvB,OAFa,IAAIC,KAAmB,IAAdD,GACDE,UA+DPjB,MAAMC,KArDP,SAACC,GACb,IAAMgB,OAA2CC,IAApCjB,EAAMkB,KAAKC,QAAQC,QAAQJ,KACxChB,EAAMkB,KAAKC,QAAQC,QAAQC,MAAQrB,EAAMkB,KAAKC,QAAQC,QAAQJ,KACxDM,EAAUtB,EAAMkB,KAAKC,QAAQC,QAAQE,QAErCC,EAAcvB,EAAMkB,KAAKM,YAAYC,UACrCC,EAAY1B,EAAMkB,KAAKM,YAAYG,MAAMT,KACzCU,EAAa5B,EAAMkB,KAAKM,YAAYK,OAAOX,KAC3CY,EAAYF,EAAWG,IAAI,SAACb,EAAMc,GAAP,OAC/BpB,EAAegB,EAAW,GAAGK,QAAUrB,EAAeM,EAAKe,MACzD,yBAAKhC,UAAU,eAAeiC,IAAKF,GACjC,8BAjBcnB,EAkBEK,EAAKe,KAjBf,IAAInB,KAAmB,IAAdD,GACHsB,WAgBe,QAE3B,yBAAKlC,UAAU,gBACb,yBAAKmC,IAAG,2BAAsBlB,EAAKmB,KAA3B,QAAuCC,IAAKpB,EAAKmB,KAAME,MAAM,QAEvE,6BACGC,KAAKC,MAAMvB,EAAKwB,aAAa,SAGjC,KA3Bc,IAAC7B,IA8Bd8B,EAAU,6BACE,yBAAK1C,UAAWC,IAAQ0C,cACtB,6BAAK,yBAAKR,IAAG,2BAAsBb,EAAYc,KAAlC,QAA8CC,IAAKf,EAAYc,KAAME,MAAM,QACxF,6BACE,2BAAIhB,EAAYoB,SAChB,8CAAoBH,KAAKC,MAAsC,IAAhClB,EAAYsB,mBAA3C,MAEF,yBAAK5C,UAAWC,IAAQwC,aAAcF,KAAKC,MAAMlB,EAAYmB,aAA7D,SAEF,6BACE,wBAAIzC,UAAU,UACd,uBAAGA,UAAU,WAAWD,EAAMkB,KAAKM,YAAYK,OAAOc,SACtD,uBAAG1C,UAAU,WAAb,cAIpB,OACE,yBAAKA,UAAU,YAAY6C,QAAS9C,EAAM+C,SACxC,yBAAK9C,UAAU,UACb,6BAAMe,EAAN,KAAcM,EAAd,YACA,6BAAMkB,KAAKC,MAAMf,EAAU,GAAGsB,iBAA9B,QAAkDR,KAAKC,MAAMf,EAAU,GAAGuB,gBAA1E,SAEF,yBAAKhD,UAAU,QACdD,EAAMkB,KAAKgC,aAAeP,EAAUb,MCzB5BhC,MAAMC,KA5BR,SAAAC,GACX,IACImD,EADanD,EAAMkB,KAAKM,YAAYG,MAAMT,KACtBkC,MAAM,GAC9BD,EAASE,QACT,IAAMC,EAAUH,EAASpB,IAAI,SAACwB,EAAKvB,GACjC,OAAO,yBAAK/B,UAAU,eAAeiC,IAAKF,EAAQ,KAChD,8BAbWnB,EAcA0C,EAAItB,KAbH,CAAC,SAAS,SAAS,UAAW,YAAa,WAAY,SAAS,YACpE,IAAInB,KAAmB,IAAdD,GACQE,YAazB,yBAAKd,UAAU,gBACb,yBAAKmC,IAAG,2BAAsBmB,EAAIlB,KAA1B,QAAsCC,IAAKiB,EAAIlB,KAAME,MAAM,QAErE,6BACGC,KAAKC,MAAMc,EAAIP,iBADlB,QACsCR,KAAKC,MAAMc,EAAIN,gBADrD,SAnBU,IAACpC,IAyBf,OACE,yBAAKZ,UAAU,YAAY6C,QAAS9C,EAAM+C,SAC1C,yBAAK9C,UAAU,UACb,6CAEF,yBAAKA,UAAU,QAAQD,EAAMkB,KAAKsC,YAAc,6BAAK,uBAAGvD,UAAU,WAAWD,EAAMkB,KAAKM,YAAYG,MAAMgB,SAAY,uBAAG1C,UAAU,WAAb,aAA4CqD,M,gBCdvJxD,MAAMC,KAfL,SAACC,GACf,IAAIyD,EAAU,GASd,OAN2BA,EADxBzD,EAAMkB,KAAKwC,QACT1D,EAAMkB,KAAKyC,SAAqB,yBAAK1D,UAAWC,IAAQ0D,aAAxB,0BACjB,yBAAK3D,UAAWC,IAAQ2D,SAEhC,yBAAK5D,UAAWC,IAAQ0D,aAAxB,aAA+C,6BAAM,6BAArD,kBAGL,yBAAK3D,UAAWC,IAAQ4D,SAC7B,4BAAKL,MCiBM3D,G,MAAAA,IAAMC,KA5BN,WACb,OAAO,gCACL,2BACE,4DACA,uBAAGgE,KAAK,oDACNC,OAAO,SACPC,IAAI,uBACJ,yBAAK7B,IAAI,8BACPE,IAAI,WACJC,MAAM,QAPZ,IAQO,uBAAGwB,KAAK,gCACXC,OAAO,SACPC,IAAI,uBACJ,yBAAK7B,IAAI,4BACPE,IAAI,WACJC,MAAM,SAGZ,2BACE,uBAAGwB,KAAK,kCAAR,uBADF,gBAGmB,uBAAGA,KAAK,yCAAR,uBCwGRG,G,iNAtHb7C,MAAQ,CACNqC,SAAS,EACT1C,KAAM,GACNG,QAAS,GACTK,YAAa,GACb0B,cAAc,EACdM,aAAa,EACbG,UAAU,G,EAwBZQ,aAAe,WACb,EAAKC,SAAS,CAAEV,SAAS,EAAMC,UAAU,IACzCU,MAAM,gDAAD,OAAiDC,iBAAjD,cAA4F,EAAKjD,MAAML,KAAvG,qDACJuD,KAAK,SAAAC,GACJ,OAAGA,EAASC,GACHD,EAASE,QAEhB,EAAKN,SAAS,CAACT,UAAU,IAClBa,EAASE,UAGnBH,KAAK,SAAArD,GACe,sBAAfA,EAAKyD,QACP,EAAKP,SAAS,CAAEjD,QAASD,EAAK,KAC9BmD,MAAM,oCAAD,OAAqCC,mCAArC,YAA2E,EAAKjD,MAAMF,QAAQyD,IAA9F,YAAqG,EAAKvD,MAAMF,QAAQ0D,IAAxH,cACJN,KAAK,SAAAC,GAAQ,OAAIA,EAASE,SAC1BH,KAAK,SAAArD,GAAI,OAAI,EAAKkD,SAAS,CAC1B5C,YAAaN,EACbwC,SAAS,U,EAMjB/C,aAAe,SAACmE,GAAW,IAAD,EACAA,EAAMd,OAAtB1D,EADgB,EAChBA,KAAMyE,EADU,EACVA,MACd,EAAKX,SAAL,eACG9D,EAAOyE,IAEV,EAAKZ,gB,EAGPa,iBAAmB,WACjB,EAAKZ,SAAS,SAACa,GACb,MAAO,CAAC/B,cAAe+B,EAAU/B,iB,EAIrCgC,gBAAkB,WAChB,EAAKd,SAAS,SAACa,GACb,MAAO,CAACzB,aAAcyB,EAAUzB,gB,mFA5DlC,IAAM2B,EAAOC,KACTC,UAAUC,aAAaD,UAAUC,YAAYC,mBACjD,SAAqBC,GACnBL,EAAKf,SAAS,CAAEV,SAAS,EAAMC,UAAU,IACzCU,MAAM,iDAAD,OAAkDC,iBAAlD,gBAA+FkB,EAASC,OAAOC,SAA/G,gBAA+HF,EAASC,OAAOE,UAA/I,qDACFpB,KAAK,SAAAC,GAAQ,OAAIA,EAASE,SAC1BH,KAAK,SAAArD,GACe,sBAAfA,EAAKyD,QACPQ,EAAKf,SAAS,CAAEjD,QAASD,IACzBmD,MAAM,oCAAD,OAAqCC,mCAArC,YAA2EkB,EAASC,OAAOC,SAA3F,YAAuGF,EAASC,OAAOE,UAAvH,cACJpB,KAAK,SAAAC,GAAQ,OAAIA,EAASE,SAC1BH,KAAK,SAAArD,GAAI,OAAIiE,EAAKf,SAAS,CAC1B5C,YAAaN,EACbwC,SAAS,a,+BAoDnB,IAAIkC,GAAe,EACfC,GAAc,EACd/B,EAAU,kBAAC,EAAD,CAAS5C,KAAMkE,KAAK/D,QA0BlC,MAxB2B,KAAvB+D,KAAK/D,MAAMF,cAA6CF,IAA3BmE,KAAK/D,MAAMG,cAAoD,IAAvB4D,KAAK/D,MAAMqC,UAClFI,GAAU,EAEV+B,EAAc,kBAACC,EAAA,EAAD,CACZC,IAAI,EACJC,QAAM,EACNC,QAAS,IACTC,WAAW,OACXhE,IAAI,iBAEJ,kBAAC,EAAD,CAAMhB,KAAMkE,KAAK/D,MAAQ0B,QAASqC,KAAKF,mBAGzCU,EAAe,kBAACE,EAAA,EAAD,CACbC,IAAI,EACJC,QAAM,EACNC,QAAS,IACTC,WAAW,OACXhE,IAAI,qBAEJ,kBAAC,EAAD,CAAOhB,KAAMkE,KAAK/D,MAAO0B,QAASqC,KAAKJ,qBAKzC,yBAAK/E,UAAU,OACb,8BACE,kBAAC,EAAD,CAAQU,aAAcyE,KAAKzE,eAC1BmD,EACA8B,EACAC,GAEH,kBAAC,EAAD,W,GAjHUM,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBvB,WACrBA,UAAUwB,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC,gB,kBElInBpH,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,yB,kBCA3DD,EAAOC,QAAU,CAAC,YAAc,2BAA2B,aAAe,+B","file":"static/js/main.ea421e58.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"welcome\":\"Welcome_welcome__2jKAu\",\"loader\":\"Welcome_loader__5RN98\",\"spin\":\"Welcome_spin__2mgJU\",\"textfocusin\":\"Welcome_textfocusin__1Vxm5\",\"text-focus-in\":\"Welcome_text-focus-in__13_H7\"};","import React from 'react'\nimport { DebounceInput } from 'react-debounce-input';\n\nimport classes from './Navbar.module.css'\n\nfunction Navbar(props) {\n  return (\n    <div className={classes.navbar}>\n      <DebounceInput\n        type='text'\n        className={classes.search}\n        name='city'\n        placeholder='Search for a City'\n        minLength={2}\n        debounceTimeout={300}\n        onChange={props.handleChange}\n      />\n    </div>\n  )\n}\n\nexport default React.memo(Navbar);\n","import React from 'react';\nimport classes from './Today.module.css'\n\nconst convertweekDay = (unixTimestamp) => {\n const date = new Date(unixTimestamp*1000)\n const weekDay = date.getDay()\n return weekDay\n}\n\nconst convertHours = (unixTimestamp) => {\n const date = new Date(unixTimestamp*1000)\n const hours = date.getHours()\n return hours\n}\n\nconst Today = (props) => {\n  const city = props.data.geocode.address.city === undefined ?\n  props.data.geocode.address.state : props.data.geocode.address.city\n  const country = props.data.geocode.address.country\n\n  const currentData = props.data.weatherInfo.currently;\n  const dailyData = props.data.weatherInfo.daily.data;\n  const hourlyData = props.data.weatherInfo.hourly.data;\n  const timeToday = hourlyData.map((data, index) =>\n    convertweekDay(hourlyData[0].time) === convertweekDay(data.time) ?\n      <div className=\"weather-item\" key={index}>\n        <div>\n          {convertHours(data.time)+\":00\"}\n        </div>\n        <div className=\"weather-icon\">\n          <img src={`./assets/weather/${data.icon}.svg`} alt={data.icon} width=\"30\"/>\n        </div>\n        <div>\n          {Math.round(data.temperature)+\"ยบ\"}\n        </div>\n      </div>\n     : null\n  )\n\n  const summary = <div>\n                    <div className={classes.upperSummary}>\n                      <div><img src={`./assets/weather/${currentData.icon}.svg`} alt={currentData.icon} width=\"60\"/></div>\n                      <div>\n                        <p>{currentData.summary}</p>\n                        <p>Chance of Rain: {Math.round(currentData.precipProbability * 100)}%</p>\n                      </div>\n                      <div className={classes.temperature}>{Math.round(currentData.temperature)}ยบ</div>\n                    </div>\n                    <div>\n                      <hr className=\"split\" />\n                      <p className=\"summary\">{props.data.weatherInfo.hourly.summary}</p>\n                      <p className=\"details\">See more</p>\n                    </div>\n                  </div>\n\n  return(\n    <div className=\"container\" onClick={props.clicked}>\n      <div className=\"header\">\n        <div>{city}, {country} (Today)</div>\n        <div>{Math.round(dailyData[0].temperatureHigh)}ยบ/{Math.round(dailyData[0].temperatureLow)}ยบ</div>\n      </div>\n      <div className=\"body\">\n      {props.data.todaySummary ? summary : timeToday}\n      </div>\n    </div>\n  )\n};\n\nexport default React.memo(Today);\n","import React from 'react'\n\nconst convert = (unixTimestamp) => {\n const weekDays = ['Sunday','Monday','Tuesday', 'Wednesday', 'Thursday', 'Friday','Saturday']\n const date = new Date(unixTimestamp*1000)\n const weekDay = weekDays[date.getDay()]\n return weekDay\n}\n\nconst Week = props => {\n  const weekData = props.data.weatherInfo.daily.data\n  let weekTest = weekData.slice(0)\n  weekTest.shift()\n  const dayData = weekTest.map((day, index) => {\n    return <div className=\"weather-item\" key={index + 100}>\n      <div>\n        {convert(day.time)}\n      </div>\n      <div className=\"weather-icon\">\n        <img src={`./assets/weather/${day.icon}.svg`} alt={day.icon} width=\"30\"/>\n      </div>\n      <div>\n        {Math.round(day.temperatureHigh)}ยบ/{Math.round(day.temperatureLow)}ยบ\n      </div>\n    </div>}\n  )\n\n  return(\n    <div className=\"container\" onClick={props.clicked}>\n    <div className=\"header\">\n      <div>Next 7 Days</div>\n    </div>\n    <div className=\"body\">{props.data.weekSummary ? <div><p className=\"summary\">{props.data.weatherInfo.daily.summary}</p><p className=\"details\">See more</p></div> : dayData}</div>\n  </div>\n  )\n}\n\nexport default React.memo(Week);\n","import React from 'react'\nimport classes from './Welcome.module.css'\n\nconst Welcome = (props) => {\n  let display = \"\"\n\n  if(props.data.loading) {\n    if(props.data.noresult) {display = <div className={classes.textfocusin}>Couldn't Find Location</div>}\n      else {display = <div className={classes.loader}></div>}\n  } else {\n    display = <div className={classes.textfocusin}>Welcome to<br /><br />Weather Search</div>\n  }\n\n  return <div className={classes.welcome}>\n    <h1>{display}</h1>\n  </div>\n}\n\nexport default React.memo(Welcome);\n","import React from 'react'\nimport './Footer.css'\n\nconst Footer = () => {\n  return <footer>\n    <p>\n      <strong>Developed by Paulo Reis </strong>\n      <a href=\"https://www.linkedin.com/in/paulo-reis-955411186/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\">\n        <img src=\"./assets/icons/linkedin.svg\"\n          alt=\"linkedin\"\n          width=\"15\"/>\n      </a> <a href=\"https://github.com/pacmanreis\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\">\n        <img src=\"./assets/icons/github.svg\"\n          alt=\"linkedin\"\n          width=\"15\"/>\n      </a>\n    </p>\n    <p>\n      <a href=\"https://darksky.net/poweredby/\">\n        Powered by Dark Sky\n      </a> & Search by <a href=\"https://locationiq.com/?ref=link-back\">\n        LocationIQ.com\n      </a>\n    </p>\n  </footer>\n}\n\nexport default React.memo(Footer);\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport Navbar from '../Components/Navbar/Navbar';\nimport Today from '../Components/Today/Today';\nimport Week from '../Components/Week/Week';\nimport Welcome from '../Components/Welcome/Welcome';\nimport Footer from '../Components/Footer/Footer';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    loading: false,\n    city: \"\",\n    geocode: \"\",\n    weatherInfo: [],\n    todaySummary: true,\n    weekSummary: true,\n    noresult: false\n  }\n\n  componentDidMount() {\n    const that = this;\n    if (navigator.geolocation) navigator.geolocation.getCurrentPosition(coordinates);\n    function coordinates(position) {\n      that.setState({ loading: true, noresult: false });\n      fetch(`https://eu1.locationiq.com/v1/reverse.php?key=${process.env.REACT_APP_LOCATION_IQ_KEY}&lat=${position.coords.latitude}&lon=${position.coords.longitude}&format=json&accept-language=en&addressdetails=1`)\n        .then(response => response.json())\n        .then(data => {\n          if (data.error !== \"Unable to geocode\")\n          { that.setState({ geocode: data })\n            fetch(`https://api.darksky.net/forecast/${process.env.REACT_APP_DARK_SKY_KEY}/${position.coords.latitude},${position.coords.longitude}?units=si`)\n            .then(response => response.json())\n            .then(data => that.setState({\n              weatherInfo: data,\n              loading: false\n            }))\n          }\n        });\n    }\n  }\n\n  handleSearch = () => {\n    this.setState({ loading: true, noresult: false })\n    fetch(`https://eu1.locationiq.com/v1/search.php?key=${process.env.REACT_APP_LOCATION_IQ_KEY}&q=${this.state.city}&format=json&accept-language=en&addressdetails=1`)\n    .then(response => {\n      if(response.ok) {\n        return response.json();\n      } else {\n        this.setState({noresult: true});\n        return response.json();\n      }\n    })\n    .then(data => {\n      if (data.error !== \"Unable to geocode\")\n      { this.setState({ geocode: data[0] })\n        fetch(`https://api.darksky.net/forecast/${process.env.REACT_APP_DARK_SKY_KEY}/${this.state.geocode.lat},${this.state.geocode.lon}?units=si`)\n        .then(response => response.json())\n        .then(data => this.setState({\n          weatherInfo: data,\n          loading: false\n        }))\n      }\n    });\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n    this.handleSearch();\n  }\n\n  handleClickToday = () => {\n    this.setState((prevState) => {\n      return {todaySummary: !prevState.todaySummary}\n    })\n  }\n\n  handleClickWeek = () => {\n    this.setState((prevState) => {\n      return {weekSummary: !prevState.weekSummary}\n    })\n  }\n\n  render() {\n    let displayToday = false;\n    let displayWeek = false;\n    let welcome = <Welcome data={this.state} />;\n\n    if (this.state.geocode !== \"\" && this.state.weatherInfo !== undefined && this.state.loading === false) {\n      welcome = false;\n\n      displayWeek = <CSSTransition\n        in={true}\n        appear\n        timeout={1000}\n        classNames=\"fade\"\n        key=\"bljkablkjabda\"\n      >\n        <Week data={this.state}  clicked={this.handleClickWeek} />\n      </CSSTransition>;\n\n      displayToday = <CSSTransition\n        in={true}\n        appear\n        timeout={1000}\n        classNames=\"fade\"\n        key=\"b3232ljkablkjabda\"\n      >\n        <Today data={this.state} clicked={this.handleClickToday} />\n      </CSSTransition>;\n    };\n\n    return (\n      <div className=\"app\">\n        <main>\n          <Navbar handleChange={this.handleChange} />\n          {welcome}\n          {displayToday}\n          {displayWeek}\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__2KrFT\",\"search\":\"Navbar_search__1gtJM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"temperature\":\"Today_temperature__2b2Xn\",\"upperSummary\":\"Today_upperSummary__3FLdO\"};"],"sourceRoot":""}